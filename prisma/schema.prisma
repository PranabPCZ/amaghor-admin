// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations below
// @db.Text

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("receptionist")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Transport Management Models
model TransportType {
  id          String @id @default(cuid())
  name        String @unique // CNG, Bus, Boat, Car
  description String?
  image       String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vehicles    Vehicle[]
  routes      Route[]
  bookings    TransportBooking[]
}

model Vehicle {
  id              String @id @default(cuid())
  transportTypeId String
  name            String // Vehicle name/identifier
  model           String?
  registrationNo  String @unique
  capacity        Int
  images          String? // JSON array of image URLs
  features        String? // JSON array of features
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  transportType   TransportType @relation(fields: [transportTypeId], references: [id], onDelete: Cascade)
  assignments     VehicleAssignment[]
  bookings        TransportBooking[]
}

model Driver {
  id          String @id @default(cuid())
  name        String
  phone       String @unique
  email       String?
  licenseNo   String @unique
  experience  Int? // years of experience
  rating      Float @default(5.0)
  image       String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignments VehicleAssignment[]
  bookings    TransportBooking[]
}

model Route {
  id              String @id @default(cuid())
  transportTypeId String
  name            String
  fromLocation    String
  toLocation      String
  distance        Float? // in kilometers
  estimatedTime   Int? // in minutes
  baseRate        Float
  perKmRate       Float @default(0)
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  transportType   TransportType @relation(fields: [transportTypeId], references: [id], onDelete: Cascade)
  schedules       TransportSchedule[]
  bookings        TransportBooking[]
}

model TransportSchedule {
  id              String @id @default(cuid())
  routeId         String
  departureTime   String // HH:MM format
  arrivalTime     String // HH:MM format
  frequency       String // daily, weekly, etc.
  operatingDays   String // JSON array of days
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  route           Route @relation(fields: [routeId], references: [id], onDelete: Cascade)
  assignments     VehicleAssignment[]
  bookings        TransportBooking[]
}

model VehicleAssignment {
  id          String @id @default(cuid())
  vehicleId   String
  driverId    String
  scheduleId  String?
  routeId     String?
  assignedDate DateTime
  status      String @default("assigned") // assigned, active, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vehicle     Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driver      Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  schedule    TransportSchedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)
}

model TransportBooking {
  id              String @id @default(cuid())
  bookingId       String @unique
  userId          String? // Optional user reference
  transportTypeId String
  vehicleId       String?
  driverId        String?
  routeId         String?
  scheduleId      String?
  
  // Passenger details
  passengerName   String
  passengerPhone  String
  passengerEmail  String?
  passengerCount  Int @default(1)
  
  // Journey details
  fromLocation    String
  toLocation      String
  journeyDate     DateTime
  journeyTime     String
  pickupLocation  String?
  dropoffLocation String?
  
  // Pricing
  totalFare       Float
  paidAmount      Float
  remainingAmount Float
  paymentStatus   String @default("partial") // partial, completed
  paymentMethod   String?
  
  // Booking status
  status          String @default("confirmed") // confirmed, in_progress, completed, cancelled
  specialRequests String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  transportType   TransportType @relation(fields: [transportTypeId], references: [id], onDelete: Cascade)
  vehicle         Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  driver          Driver? @relation(fields: [driverId], references: [id], onDelete: SetNull)
  route           Route? @relation(fields: [routeId], references: [id], onDelete: SetNull)
  schedule        TransportSchedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)
}
